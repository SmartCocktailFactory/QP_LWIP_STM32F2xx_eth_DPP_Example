/*****************************************************************************
* Model: dpp.qm
* File:  ./dpp.h
*
* This file has been generated automatically by QP Modeler (QM).
* DO NOT EDIT THIS FILE MANUALLY.
*
* Please visit www.state-machine.com/qm for more information.
*****************************************************************************/
#ifndef dpp_h
#define dpp_h

enum DPPSignals {
   EAT_SIG = Q_USER_SIG,     /* published by Table to let a philosopher eat */
   DONE_SIG,                   /* published by Philosopher when done eating */
   TERMINATE_SIG,          /* published by BSP to terminate the application */

   DISPLAY_IPADDR_SIG,         /* published by lwIPMgr to display IP addres */
   DISPLAY_CGI_SIG,             /* published by lwIPMgr to display CGI text */
   DISPLAY_UDP_SIG,             /* published by lwIPMgr to display UDP text */

   MAX_PUB_SIG,                                /* the last published signal */

   HUNGRY_SIG,          /* posted direclty to Table from hungry Philosopher */
   SEND_UDP_SIG,         /* posted directly to lwIPMgr to send text via UDP */
   MAX_SIG                                               /* the last signal */
};

/* @(/1/0) .................................................................*/
typedef struct TableEvtTag {
/* protected: */
    QEvent super;

/* public: */
    uint8_t philoNum;
} TableEvt;

/* @(/1/1) .................................................................*/
typedef struct TextEvtTag {
/* protected: */
    QEvent super;

/* public: */
    char text[16];
} TextEvt;


enum { N_PHILO = 5 };                             /* number of philosophers */

void Philo_ctor(void);

void Table_ctor(void);


extern QActive * const AO_Philo[N_PHILO];
extern QActive * const AO_Table;
extern QActive * const AO_LwIPMgr;

#endif                                                             /* dpp_h */
